// This is an autogenerated file from Firebase Studio.
"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { messagesDB, markAsReplied } from '@/lib/messagesStore';
import type { ReceivedMessage } from '@/lib/messagesStore';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { handleReplySubmit } from './actions';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { Send, Loader2 } from 'lucide-react';

const replySchema = z.object({
  reply: z.string().min(10, { message: 'A resposta deve ter pelo menos 10 caracteres.' }),
});

export default function MessagesManager() {
  const { toast } = useToast();
  const [messages, setMessages] = useState(messagesDB);
  const [selectedMessage, setSelectedMessage] = useState<ReceivedMessage | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const form = useForm<z.infer<typeof replySchema>>({
    resolver: zodResolver(replySchema),
    defaultValues: { reply: '' },
  });

  const openReplyDialog = (message: ReceivedMessage) => {
    setSelectedMessage(message);
    form.reset({ reply: '' });
    setIsDialogOpen(true);
  };

  const onSubmit = async (values: z.infer<typeof replySchema>) => {
    if (!selectedMessage) return;

    const result = await handleReplySubmit({
      to: selectedMessage.email,
      subject: selectedMessage.subject,
      html: values.reply.replace(/\n/g, '<br>'),
      messageId: selectedMessage.id,
    });

    if (result.success) {
      markAsReplied(selectedMessage.id, values.reply);
      setMessages([...messagesDB]);
      setIsDialogOpen(false);
      toast({
        title: 'Resposta Enviada!',
        description: `Sua resposta para ${selectedMessage.name} foi enviada com sucesso.`,
      });
    } else {
      toast({
        variant: 'destructive',
        title: 'Falha no Envio',
        description: result.error || 'Não foi possível enviar a resposta.',
      });
    }
  };

  return (
    <Card className="shadow-lg animate-fade-in-up">
      <CardHeader>
        <CardTitle className="text-2xl font-semibold">Caixa de Entrada</CardTitle>
        <CardDescription>Visualize e responda as mensagens enviadas através do site.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="rounded-lg border bg-card">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>De</TableHead>
                <TableHead>Assunto</TableHead>
                <TableHead className="hidden md:table-cell">Recebido em</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {messages.map((message) => (
                <TableRow key={message.id}>
                  <TableCell className="font-medium">{message.name}</TableCell>
                  <TableCell>{message.subject}</TableCell>
                  <TableCell className="hidden md:table-cell">{format(message.receivedAt, "dd/MM/yyyy 'às' HH:mm", { locale: ptBR })}</TableCell>
                  <TableCell>
                    {message.replied ? <Badge>Respondido</Badge> : <Badge variant="secondary">Pendente</Badge>}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="outline" size="sm" onClick={() => openReplyDialog(message)}>
                      Ver e Responder
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        {messages.length === 0 && (
          <div className="text-center py-12 text-muted-foreground">
            <p>Nenhuma mensagem recebida ainda.</p>
          </div>
        )}
      </CardContent>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-2xl">
          <DialogHeader>
            <DialogTitle>Responder Mensagem</DialogTitle>
            <DialogDescription>
              Enviando resposta para <span className="font-medium text-primary">{selectedMessage?.name} ({selectedMessage?.email})</span>
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <Card className="bg-muted/50">
              <CardHeader>
                <CardTitle className="text-lg">Mensagem Original</CardTitle>
                <p className="text-sm text-muted-foreground">De: {selectedMessage?.name} - Assunto: {selectedMessage?.subject}</p>
              </CardHeader>
              <CardContent>
                <p className="text-sm">{selectedMessage?.message}</p>
              </CardContent>
            </Card>

            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="reply"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base font-semibold">Sua Resposta</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Digite sua resposta aqui..."
                          rows={8}
                          {...field}
                          disabled={form.formState.isSubmitting}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                    <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)} disabled={form.formState.isSubmitting}>
                        Cancelar
                    </Button>
                    <Button type="submit" disabled={form.formState.isSubmitting}>
                        {form.formState.isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Send className="mr-2 h-4 w-4" />}
                        {form.formState.isSubmitting ? 'Enviando...' : 'Enviar Resposta'}
                    </Button>
                </DialogFooter>
              </form>
            </Form>
          </div>
        </DialogContent>
      </Dialog>
    </Card>
  );
}
